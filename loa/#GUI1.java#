import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.ArrayList;


/**
 * This panel lets two users play Loa against each other.
 * Black always starts the game. 
 * The class has a main() routine that lets it be run as a stand-alone
 * application.
 @author SSS*/
public class Loa extends JPanel {
   
   /** Some generic serial required to compile.*/
    private static final long serialVersionUID = 1L;

/**
    * Main routine makes it possible to run Loa as a stand-alone
    * application.  Opens a window showing a Loa panel; the program
    * ends when the user closes the window.
    */
   public static void main(String[] args) {
      JFrame window = new JFrame("Lines of Action");
      Loa content = new Loa();
      window.setContentPane(content);
      window.pack();
      Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
      window.setLocation( (screensize.width - window.getWidth())/2,
            (screensize.height - window.getHeight())/2 );
      window.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
      window.setResizable(false);  
      window.setVisible(true);
   }
   /**Button for starting a new game.*/   
   private JButton newGameButton;
   
   /** Button for Human vs. AI. */
   private JButton aiButton;
   
   /** Button for AI vs. AI. */
   private JButton aiaiButton;
   
   /**Button that a player can use to end the game by resigning.*/
   private JButton resignButton;   
   
   /**Label for displaying messages to the user.*/
   private JLabel message;
   



/**
 * @param message the message to set
 */
void setMessage(JLabel message) {
	this.message = message;
}



/**
    * The constructor creates the Board , adds all the components, and sets
    * the bounds of the components.  A null layout is used.  (This is
    * the only thing that is done in the main Loa class.)
    */
   public Loa() {
      setLayout(null);
      setPreferredSize( new Dimension(350,250) ); 
      setBackground(Color.WHITE);
      Board board = new Board(); 
      add(board);
      add(newGameButton);
      add(resignButton);
      add(aiButton);
      add(aiaiButton);
      add(message);     
      board.setBounds(20,20,164,164); 
      newGameButton.setBounds(210, 20, 120, 30);
      resignButton.setBounds(210, 153, 120, 30);
      aiButton.setBounds(210, 64, 120, 30);
      aiaiButton.setBounds(210, 109, 120, 30);
      message.setBounds(0, 200, 350, 30);
   } 

   /**
    * A LoaMove object represents a move in the game of Loa. 
    */
   private static class LoaMove {
      int fromRow, fromCol;
      int toRow, toCol;    
      LoaMove(int r1, int c1, int r2, int c2) {
         fromRow = r1;
         fromCol = c1;
         toRow = r2;
         toCol = c2;
      }
   }
   
   
   
   /**
    * This panel displays a 160-by-160 LOAboard pattern. This class does
    * the work of letting the users play Loa, and it displays
    * the LOAboard.
    */
    private class Board extends JPanel implements ActionListener, MouseListener {

    	/** random serial.*/
    	private static final long serialVersionUID = 1L;

    	/**The data for the Loa bord is kept here.*/
    	LoaData board;
    	
    	/** is a game currently in progess?.*/
    	boolean gameInProgress;
      
    	/**current turn.*/
    	int currentPlayer;
    	
    	/**If the current player selects a piece to move
    	 * these give the row and colmn containing that piece.
    	 */
    	int selectedRow, selectedCol;  
      
    	/**An array containing the legal moves for the current player.*/
    	LoaMove[] legalMoves;  
     
    	/**
    	 * Constructor.  Create the buttons and label.  Listens for mouse
        * clicks on buttons.  Creates the board and
        * starts the first game.*/
      Board() {
         setBackground(Color.BLACK);
         addMouseListener(this);
         resignButton = new JButton("Resign");
         resignButton.addActionListener(this);
         aiButton = new JButton("You vs AI");
         aiButton.addActionListener(this);
         aiaiButton = new JButton("AI vs AI");
         aiaiButton.addActionListener(this);
         newGameButton = new JButton("New Game");
         newGameButton.addActionListener(this);
         message = new JLabel("",JLabel.CENTER);
         message.setFont(new  Font("Serif", Font.BOLD, 20));
         message.setForeground(Color.BLACK);
         board = new LoaData();
         doNewGame();
      }
      
      
      /** Respond to user's click EVT on one of the two buttons.
       */
      public void actionPerformed(ActionEvent evt) {
         Object src = evt.getSource();
         if (src == newGameButton) {
            doNewGame();
         } else if (src == resignButton) {
            doResign();
         } else if (src == aiButton) {
             playAI();
         } else if (src == aiaiButton) {
             playAIAI();
         }
      }
      
      /** Starts game against AI. */
      void playAI() {
          if (gameInProgress) {
              message.setText("Finish the current game first!");
              return;
          }
          // Fill in with Human vs. AI.
          
      }

      /** Starts AI vs AI. */
      void playAIAI() {
          if (gameInProgress) {
              message.setText("Finish the current game first!");
              return;
          }
          // Fill in with AI vs. AI. 
      }
      
      /** Start a new game.*/
      void doNewGame() {
         if (gameInProgress) {
            message.setText("Finish the current game first!");
            return;
         }
         board.setUpGame();
         currentPlayer = LoaData.BLACK; 
         legalMoves = board.getLegalMoves(LoaData.BLACK);
         selectedRow = -1;
         message.setText("Black:  Make your move.");
         gameInProgress = true;
         newGameButton.setEnabled(false);
         resignButton.setEnabled(true);
         repaint();
      }
      
      
      /** Current player resigns. Opponent wins.*/
      void doResign() {
         if (!gameInProgress) {
            message.setText("There is no game in progress!");
            return;
         }
         if (currentPlayer == LoaData.WHITE)
            gameOver("WHITE resigns.  BLACK wins.");
         else
            gameOver("BLACK resigns.  WHITE wins.");
      }
      
      
      /**
       * The game ends. The parameter, STR, is displayed as a message
       * to the user.*/
      void gameOver(String str) {
         message.setText(str);
         newGameButton.setEnabled(true);
         resignButton.setEnabled(false);
         gameInProgress = false;
      }
      
      
      /**
       * This is called by mousePressed() when a player clicks on the
       * square in the specified ROW and COL.*/
      void doClickSquare(int row, int col) {
         for (int i = 0; i < legalMoves.length; i++)
            if (legalMoves[i].fromRow == row && legalMoves[i].fromCol == col) {
               selectedRow = row;
               selectedCol = col;
               if (currentPlayer == LoaData.WHITE)
                  message.setText("WHITE:  Make your move.");
               else
                  message.setText("BLACK:  Make your move.");
               repaint();
               return;
            }
         if (selectedRow < 0) {
            message.setText("Click the piece you want to move.");
            return;
         }
         for (int i = 0; i < legalMoves.length; i++)
            if (legalMoves[i].fromRow == selectedRow && legalMoves[i].fromCol == selectedCol
                  && legalMoves[i].toRow == row && legalMoves[i].toCol == col) {
               doMakeMove(legalMoves[i]);
               return;
            }
         message.setText("Click the square you want to move to.");         
      }
      
      
      /**
       * This is called when the current player has chosen the specified
       * move. */
      void doMakeMove(LoaMove move) {
         board.makeMove(move);
         
         /* If the move was a jump, it's possible that the player has another
          jump.  Check for legal jumps starting from the square that the player
          just moved to.  If there are any, the player must jump.  The same
          player continues moving.
          */
         
        
            legalMoves = board.getLegalMoves(currentPlayer);
            if (legalMoves != null) {
               selectedRow = move.toRow;  // Since only one piece can be moved, select it.
               selectedCol = move.toCol;
               repaint();          
         }
         
         /* The current player's turn is ended, so change to the other player.
          Get that player's legal moves.  If the player has no legal moves,
          then the game ends. */
         
         if (currentPlayer == LoaData.WHITE) {
            currentPlayer = LoaData.BLACK;
            legalMoves = board.getLegalMoves(currentPlayer);
            message.setText("BLACK:  Make your move.");
         } else {
            currentPlayer = LoaData.WHITE;
            legalMoves = board.getLegalMoves(currentPlayer);
            message.setText("WHITE:  Make your move.");
         }
         
         /* Set selectedRow = -1 to record that the player has not yet selected
          a piece to move. */
         
         selectedRow = -1;
         
         /* As a courtesy to the user, if all legal moves use the same piece, then
          select that piece automatically so the use won't have to click on it
          to select it. */
         
         if (legalMoves != null) {
            boolean sameStartSquare = true;
            for (int i = 1; i < legalMoves.length; i++)
               if (legalMoves[i].fromRow != legalMoves[0].fromRow
                     || legalMoves[i].fromCol != legalMoves[0].fromCol) {
                  sameStartSquare = false;
                  break;
               }
            if (sameStartSquare) {
               selectedRow = legalMoves[0].fromRow;
               selectedCol = legalMoves[0].fromCol;
            }
         }
         
         /* Make sure the board is redrawn in its new state. */
         
         repaint();
         
      }  // end doMakeMove();
      
      
      /**
       * Draw  LOAboard pattern in gray and lightGray.  Draw the
       * Loa.  If a game is in progress, hilite the legal moves.
       */
      public void paintComponent(Graphics g) {
         
         /* Draw a two-pixel black border around the edges of the canvas. */
         
         g.setColor(Color.black);
         g.drawRect(0,0,getSize().width-1,getSize().height-1);
         g.drawRect(1,1,getSize().width-3,getSize().height-3);
         
         /* Draw the squares of the LOAboard and the Loa. */
         
         for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
               if ( row % 2 == col % 2 )
                  g.setColor(Color.lightGray);
               else
                  g.setColor(Color.GRAY);
               g.fillRect(2 + col*20, 2 + row*20, 20, 20);
               switch (board.pieceAt(row,col)) {
               case LoaData.WHITE:
                  g.setColor(Color.WHITE);
                  g.fillOval(4 + col*20, 4 + row*20, 15, 15);
                  break;
               case LoaData.BLACK:
                  g.setColor(Color.BLACK);
                  g.fillOval(4 + col*20, 4 + row*20, 15, 15);
                  break;
               }
            }
         }
         
         /* If a game is in progress, hilite the legal moves.   Note that legalMoves
          is never null while a game is in progress. */      
         
         if (gameInProgress) {
               /* First, draw a 2-pixel cyan border around the pieces that can be moved. */
            g.setColor(Color.blue);
            for (int i = 0; i < legalMoves.length; i++) {
               g.drawRect(2 + legalMoves[i].fromCol*20, 2 + legalMoves[i].fromRow*20, 19, 19);
               g.drawRect(3 + legalMoves[i].fromCol*20, 3 + legalMoves[i].fromRow*20, 17, 17);
            }
               /* If a piece is selected for moving (i.e. if selectedRow >= 0), then
                draw a 2-pixel white border around that piece and draw green borders 
                around each square that that piece can be moved to. */
            if (selectedRow >= 0) {
               g.setColor(Color.white);
               g.drawRect(2 + selectedCol*20, 2 + selectedRow*20, 19, 19);
               g.drawRect(3 + selectedCol*20, 3 + selectedRow*20, 17, 17);
               g.setColor(Color.green);
               for (int i = 0; i < legalMoves.length; i++) {
                  if (legalMoves[i].fromCol == selectedCol && legalMoves[i].fromRow == selectedRow) {
                     g.drawRect(2 + legalMoves[i].toCol*20, 2 + legalMoves[i].toRow*20, 19, 19);
                     g.drawRect(3 + legalMoves[i].toCol*20, 3 + legalMoves[i].toRow*20, 17, 17);
                  }
               }
            }
         }

      }  // end paintComponent()
      
      
      /**
       * Respond to a user click on the board.  If no game is in progress, show 
       * an error message.  Otherwise, find the row and column that the user 
       * clicked and call doClickSquare() to handle it.
       */
      public void mousePressed(MouseEvent evt) {
         if (gameInProgress == false)
            message.setText("Click \"New Game\" to start a new game.");
         else {
            int col = (evt.getX() - 2) / 20;
            int row = (evt.getY() - 2) / 20;
            if (col >= 0 && col < 8 && row >= 0 && row < 8)
               doClickSquare(row,col);
         }
      }
      
      
      public void mouseReleased(MouseEvent evt) { }
      public void mouseClicked(MouseEvent evt) { }
      public void mouseEntered(MouseEvent evt) { }
      public void mouseExited(MouseEvent evt) { }
      
      
   }  // end class Board
   
   
   
   /**
    * An object of this class holds data about a game of Loa.
    * It knows what kind of piece is on each square of the LOAboard.
    * Note that WHITE moves "up" the board (i.e. row number decreases)
    * while BLACK moves "down" the board (i.e. row number increases).
    * Methods are provided to return lists of available legal moves.
    */
   private static class LoaData {
      
      /*  The following constants represent the possible contents of a square
          on the board.  The constants WHITE and BLACK also represent players
          in the game. */

      static final int
                EMPTY = 0,
                WHITE = 1,
                BLACK = 3;
      
      
      int[][] board;  // board[r][c] is the contents of row r, column c.  
      
      
      /**
       * Constructor.  Create the board and set it up for a new game.
       */
      LoaData() {
         board = new int[8][8];
         setUpGame();
      }
      
      
      /**
       * Set up the board with Loa in position for the beginning
       * of a game.  Note that Loa can only be found in squares
       * that satisfy  row % 2 == col % 2.  At the start of the game,
       * all such squares in the first three rows contain black squares
       * and all such squares in the last three rows contain red squares.
       */
      void setUpGame() {
         for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
               if ( row % 1 == col % 1 ) {
                  if (row < 1 || row > 6) {
                      if (col > 0 && col < 7) {
                          board[row][col] = BLACK;
                      }
                  }
                  else if (col < 1 || col > 6) {
                      if (row > 0 && row < 7) {
                          board[row][col] = WHITE;
                      }
                  }
                  else
                     board[row][col] = EMPTY;
               }
               else {
                  board[row][col] = EMPTY;
               }
            }
         }
      }  // end setUpGame()
      
      
      /**
       * Return the contents of the square in the specified row and column.
       */
      int pieceAt(int row, int col) {
         return board[row][col];
      }
            
      
      /**
       * Make the specified move.  It is assumed that move
       * is non-null and that the move it represents is legal.
       */
      void makeMove(LoaMove move) {
         makeMove(move.fromRow, move.fromCol, move.toRow, move.toCol);
      }
      
      
      /**
       * Make the move from (fromRow,fromCol) to (toRow,toCol).  It is
       * assumed that this move is legal.  If the move is a jump, the
       * jumped piece is removed from the board.  If a piece moves
       * the last row on the opponent's side of the board, the 
       * piece becomes a king.
       */
      void makeMove(int fromRow, int fromCol, int toRow, int toCol) {
         board[toRow][toCol] = board[fromRow][fromCol];
         board[fromRow][fromCol] = EMPTY;
        
      }
      
      /**
       * Return an array containing all the legal LoaMoves
       * for the specified player on the current board.  If the player
       * has no legal moves, null is returned.  The value of player
       * should be one of the constants WHITE or BLACK; if not, null
       * is returned.  If the returned value is non-null, it consists
       * entirely of jump moves or entirely of regular moves, since
       * if the player can jump, only jumps are legal moves.
       */
      LoaMove[] getLegalMoves(int player) {
         
         if (player != WHITE && player != BLACK)
            return null;
         ArrayList<LoaMove> moves = new ArrayList<LoaMove>();  // Moves will be stored in this list.

         
         /*  If any jump moves were found, then the user must jump, so we don't 
          add any regular moves.  However, if no jumps were found, check for
          any legal regular moves.  Look at each square on the board.
          If that square contains one of the player's pieces, look at a possible
          move in each of the four directions from that square.  If there is 
          a legal move in that direction, put it in the moves ArrayList.
          */
         counter = 0;
         int playerc = 0;
      	 

         
         if (moves.size() == 0) {
             
            for (int row = 0; row < 8; row++) {
               for (int col = 0; col < 8; col++) {
                 int z = 0; 
                 int y = 0;
                 int a = 0;
                 int b = 0;
                  if (board[row][col] == player ) {
                	  playerc ++;
                      for (int x = 0; x < 8; x++) {
                          if (board[x][col] == BLACK || board[x][col] == WHITE) {
                              z++;
                          }
                      }
                      for (int x = 0; x < 8; x++) {
                          if (board[row][x] == BLACK ||  board[row][x] == WHITE) {
                              y++;
                          }
                      }
                     for (int x = row, k = col; x < 8 && k < 8; x++, k++) {
                         if (board[x][k] == BLACK ||  board[x][k] == WHITE) {
                          a++;
                      }
                     }
                     for (int x = row, k = col; x >= 0 && k >= 0; x--, k--) {
                         if (board[x][k] == BLACK ||  board[x][k] == WHITE) {
                          a++;
                      }
                     }
                     a--;
                     for (int x = row, k = col; x < 8 && k >= 0; x++, k--) {
                         if (board[x][k] == BLACK ||  board[x][k] == WHITE) {
                          b++;
                      }
                     }
                     for (int x = row, k = col; x >= 0 && k < 8; x--, k++) {
                         if (board[x][k] == BLACK ||  board[x][k] == WHITE) {
                          b++;
                      }
                     }
                     b--;
                     if (canMove(player,row,col,row + z,col, 1))
                        moves.add(new LoaMove(row,col,row+z,col));
                     if (canMove(player,row,col,row-z,col, 1))
                         moves.add(new LoaMove(row,col,row-z,col));
                     if (canMove(player,row,col,row,col-y, 2))
                         moves.add(new LoaMove(row,col,row,col-y));
                     if (canMove(player,row,col,row,col + y, 2))
                         moves.add(new LoaMove(row,col,row,col + y));
                     if (canMove(player,row,col,row + a,col + a, 3))
                         moves.add(new LoaMove(row,col,row + a,col + a));
                     if (canMove(player,row,col,row - a,col - a, 3))
                         moves.add(new LoaMove(row,col,row - a,col - a));
                     if (canMove(player,row,col,row + b,col - b, 4))
                         moves.add(new LoaMove(row,col,row + b,col - b));
                     if (canMove(player,row,col,row - b,col + b, 4))
                         moves.add(new LoaMove(row,col,row - b,col + b));
                     
                  }
               }
            }
         }
         Pair mine = myPlayer(player);
         countthat(mine.getL(), mine.getR(),new ArrayList<Pair>(), player);
         System.out.println(counter);
         if (counter >= playerc - 1){
        	 JFrame win = new JFrame();
        	 win.setSize(300, 300);
        	 win.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        	 win.setVisible(true);
        	 Dimension screensize = Toolkit.getDefaultToolkit().getScreenSize();
             win.setLocation( (screensize.width - win.getWidth())/2,
                   (screensize.height - win.getHeight())/2 );
             JLabel message = new JLabel("",JLabel.CENTER);
             message.setFont(new  Font("Serif", Font.BOLD, 20));
             message.setForeground(Color.BLACK);
             if (player == 1){
            	 message.setText("White wins.");
            	 win.add(message);
             } else {
            	 message.setText("Black wins.");
            	 win.add(message);
             }
         }
         /* If no legal moves have been found, return null.  Otherwise, create
          an array just big enough to hold all the legal moves, copy the
          legal moves from the ArrayList into the array, and return the array. */
         
         if (moves.size() == 0)
            return null;
         else {
            LoaMove[] moveArray = new LoaMove[moves.size()];
            for (int i = 0; i < moves.size(); i++)
               moveArray[i] = moves.get(i);
            return moveArray;
         }
         
      }  // end getLegalMoves
      

      /**
       * Return a list of the legal jumps that the specified player can
       * make starting from the specified row and column.  If no such
       * jumps are possible, null is returned.  The logic is similar
       * to the logic of the getLegalMoves() method.
       */

      
      
      /**
       * This is called by the getLegalMoves() method to determine whether
       * the player can legally move from (r1,c1) to (r2,c2).  It is
       * assumed that (r1,r2) contains one of the player's pieces and
       * that (r2,c2) is a neighboring square.
       */
      private boolean canMove(int player, int r1, int c1, int r2, int c2, int direct) {
         
         if (r2 < 0 || r2 >= 8 || c2 < 0 || c2 >= 8)
            return false;  // (r2,c2) is off the board.
         
         if (direct == 1) {
             if(r1 < r2) {
                 for (int k = r1; k < r2; k++) {
                     if (board[k][c1] != player && board[k][c1] != EMPTY ) {
                         return false;
                     }
                }
             } else {
                 for ( int k = r1 ; k > r2; k--) {
                     if (board[k][c1] != player && board[k][c1] != EMPTY ) {
                            return false;
                     }
                 }
             }
         } else if (direct == 2) {
         
             if(c1 < c2) {
                 for (int k = c1; k < c2; k++) {
                     if (board[r1][k] != player && board[r1][k] != EMPTY ) {
                         return false;
                     }
                 }
             } else {
                 for ( int k = c1 ; k > c2; k--) {
                     if (board[r1][k] != player && board[r1][k] != EMPTY ) {
                         return false;
                     }
                 }
             }
         } else if (direct == 3) {
             if (c1 < c2 && r1 < r2) {
                 for (int k = c1, l = r1; k < c2 && l < r2; k++, l++) {
                     if (board[l][k] != player && board[l][k] != EMPTY ) {
                         return false;
                     }
                 }
             } else if (c1 > c2 && r1 > r2) {
                 for (int k = c1, l = r1; k > c2 && l > r2; k--, l--) {
                     if (board[l][k] != player && board[l][k] != EMPTY ) {
                         return false;
                     }
                 }
             } 
         } else if (direct == 4) {
         
             if (c1 > c2 && r1 < r2) {
                 for (int k = c1, l = r1; k > c2 && l < r2; k--, l++) {
                     if (board[l][k] != player && board[l][k] != EMPTY ) {
                         return false;
                     }
                 }
             } else if (c1 < c2 && r1 > r2) {
                 for (int k = c1, l = r1; k < c2 && l > r2; k++, l--) {
                     if (board[l][k] != player && board[l][k] != EMPTY ) {
                         return false;
                     }
                 }
             }
         } 
         return true;
         
      }  
      
 int counter = 0;
      
      Pair myPlayer(int player) {
    	  for (int row = 0; row < 8; row++) {
              for (int col = 0; col < 8; col++) {
                 if (board[row][col] == player) {
                	 return new Pair(row, col);
                 }
              }
    	  }
    	  return new Pair(0, 0);
      }
      
      int countthat(int row, int col, ArrayList<Pair> pairs, int player) {
    	  if ((row < 7) && (!notin(new Pair(row + 1, col), pairs)) && board[row + 1][col] == player) {
    		  pairs.add(new Pair(row, col));
    		  counter ++;
    		  countthat(row + 1, col, pairs, player);
    	  }
    	  if ((row < 7 &&  col < 7) && (!notin(new Pair(row + 1, col + 1), pairs)) && board[row + 1][col + 1] == player) {
    		  pairs.add(new Pair(row, col));
    		  counter ++;
    		  countthat(row + 1, col + 1, pairs, player);
    	  }
    	  if ((row > 0) && (!notin(new Pair(row - 1, col), pairs)) && board[row - 1][col] == player) {
    		  pairs.add(new Pair(row, col));
    		  counter ++;
    		  countthat(row - 1, col, pairs, player);
    	  }
    	  if ((row > 0 && col > 0) && (!notin(new Pair(row - 1, col - 1), pairs)) && board[row - 1][col - 1] == player) {
    		  pairs.add(new Pair(row, col));
    		  counter ++;
    		  countthat(row - 1, col - 1, pairs, player);
    	  }
    	  if ((col < 7) && (!notin(new Pair(row, col + 1), pairs)) && board[row][col + 1] == player) {
    		  pairs.add(new Pair(row, col));
    		  counter ++;
    		  countthat(row, col + 1, pairs, player);
    	  }
    	  if ((col > 0) && (!notin(new Pair(row, col - 1), pairs)) && board[row][col - 1] == player) {
    		  pairs.add(new Pair(row, col));
    		  counter ++;
    		  countthat(row, col - 1, pairs, player);
    	  }
    	  if ((row < 7 && col > 0) && (!notin(new Pair(row + 1, col - 1), pairs)) && board[row + 1][col -1] == player) {
    		  pairs.add(new Pair(row, col));
    		  counter ++;
    		  countthat(row + 1, col - 1, pairs, player);
    	  }
    	  if ((row > 0  && col < 7)   && (!notin(new Pair(row - 1, col + 1), pairs)) &&  board[row - 1][col + 1] == player) {
    		  pairs.add(new Pair(row, col));
    		  counter ++;
    		  countthat(row - 1, col + 1, pairs, player);
    	  }
    	  return 0;
      }
  
      boolean notin(Pair jew, ArrayList<Pair> jews) {
    	  for (Pair elem : jews){
    		  if (elem.equals(jew)) {
    			  return true;
    		  }
    	  }
    	  return false;
      }
      
   } // end class LoaData
   
   
}